angular.module("filters").filter("parseQID",function(){return function(input){return input?input.split("/").slice(-1)[0]:"None"}}),angular.module("filters").filter("taxid2Name",function(){var chlamMap={471472:"Chlamydia trachomatis 434/BU",272561:"Chlamydia trachomatis D/UW-3/CX",243161:"Chlamydia muridarum Str. Nigg",115713:"Chlamydia pneumoniae CWL209"};return function(input){return input?chlamMap[input]:"None"}}),angular.module("filters").filter("replaceColon",function(){return function(input){return input.split(":").join("_")}}),angular.module("filters").filter("replaceColon",function(){return function(input){return input.split(":").join("_")}}),angular.module("filters").filter("replaceperiod",function(){return function(input){return input.split(".").join("_")}}),angular.module("filters").filter("convertStrand",function(){return function(input){return input?"Q22809711"===input?"reverse":"forward":"None"}}),angular.module("filters").filter("strandNum",function(){return function(input){return input?"Q22809711"===input?"2":"1":"None"}}),angular.module("filters").filter("uniqueGoTerms",function(){return function(input){var newList=[];return angular.forEach(input,function(oldItem){angular.forEach(newList,function(newItem){oldItem!=newItem&&newList.push(newItem)})}),newList}}),angular.module("filters").filter("goClass",function(){var goclasses={mf_button:"Molecular Function",cc_button:"Cellular Component",bp_button:"Biological Process"};return function(input){return goclasses[input]}}),angular.module("filters").filter("startFrom",function(){return function(input,start){return start=+start,input.slice(start)}}),angular.module("filters").filter("list2CSV",function(){return function(input){return input?input.join(", "):"None"}}),angular.module("filters").filter("getJsonItem",function(){return function(ikey,ivalue,ijson){var curGene;return angular.forEach(ijson,function(value,key){if(value[ikey].value!=ivalue)return"none";curGene=value}),curGene}}),angular.module("filters").filter("getJsonItemNoWD",function(){return function(ikey,ivalue,ijson){var curGene=[];return angular.forEach(ijson,function(value,key){if(value[ikey]!=ivalue)return"none";curGene.push(value)}),curGene}}),angular.module("filters").filter("deleteJsonItem",function(){return function(ikey,ivalue,ijson){var goodGenes=[];return angular.forEach(ijson,function(value,key){value[ikey].value!=ivalue||goodGenes.push(value)}),goodGenes}}),angular.module("filters").filter("deleteJsonItemValuesList",function(){return function(ikey,ivalue,ijson){var hits=[];return angular.forEach(ivalue,function(tid){angular.forEach(ijson,function(value,key){value[ikey].value==tid&&hits.push(value)})}),hits}}),angular.module("filters").filter("getJsonItemOrg",function(){return function(ikey,ivalue,ijson){var curGene;return angular.forEach(ijson,function(value,key){if(value[ikey]!=ivalue)return"none";curGene=value}),curGene}}),angular.module("filters").filter("orderObjectBy",function(){return function(input,attribute){if(!angular.isObject(input))return input;var array=[];for(var objectKey in input)array.push(input[objectKey]);return array.sort(function(a,b){return(a=parseInt(a[attribute].value))-(b=parseInt(b[attribute].value))}),array}}),angular.module("filters").filter("keywordFilter",["$filter",function($filter){return function(data,text){var textArr=text.split(" ");return console.log(textArr),angular.forEach(textArr,function(test){test&&(data=$filter("filter")(data,test))}),data}}]),angular.module("filters").filter("cut",function(){return function(value,wordwise,max,tail){if(!value)return"";if(!(max=parseInt(max,10)))return value;if(value.length<=max)return value;if(value=value.substr(0,max),wordwise){var lastspace=value.lastIndexOf(" ");-1!=lastspace&&("."!=value.charAt(lastspace-1)&&","!=value.charAt(lastspace-1)||(lastspace-=1),value=value.substr(0,lastspace))}return value+(tail||" â€¦")}}),angular.module("filters").filter("typeFilter",function(){var types={Q7187:"gene",Q20747295:"protein-coding-gene",Q8054:"protein"};return function(input){return types[input]}});